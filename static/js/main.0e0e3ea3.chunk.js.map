{"version":3,"sources":["components/process-table/index.js","components/process-dialog/index.js","scheduler.js","components/scheduling-section/index.js","App.js","index.js"],"names":["ProcessTable","processes","onClick","className","map","p","key","id","style","backgroundColor","color","arrivalTime","serviceTime","priority","ProcessDialog","process","onSave","onCancel","useState","setColor","processId","setProcessId","oProcessId","setArrivalTime","setServiceTime","setPriority","e","stopPropagation","initialHexColor","onChange","placement","value","target","oid","hex","parseInt","baseTs","Date","getTime","uniq","index","self","indexOf","convertFromTo","from","to","res","getProcessesInTimespan","filter","findShortestServiceTime","sort","a","b","fcfs","stats","totalTurnaroundTime","totalResponseTime","averageTurnaroundTime","averageResponseTime","colors","forEach","lastProc","length","lastTerminateTime","responseTime","push","scheduledProcesses","spn","processSelector","currentTimeMark","processBatch","nextProcess","pop","srt","startTimes","terminateTimes","importantTimes","reverse","currentProcess","timeLeftForProcess","_startTime","potentialNextProcess","potentialNextProcessIsShorterThanCurrent","_endTime","undefined","SchedulingSection","type","headline","selected_scheduler","scheduler","width","height","chartType","loader","data","options","avoidOverlappingGridLines","defaultProcesses","App","setProcesses","selectedProcess","setSelectedProcess","currentProcesses","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e0e3ea3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nfunction ProcessTable({processes, onClick}) {\n  return (\n    <div className=\"ProcessTable\">\n      {processes.map(p => {\n        return (\n          <div onClick={() => onClick(p)} key={p.id} className=\"ProcessTable-Item box\">\n            <div className=\"color\" style={{ backgroundColor: p.color }}></div>\n            <div><i>Process:</i>{p.id}</div>\n            <div><i>ArrivalTime:</i>{p.arrivalTime}</div>\n            <div><i>ServiceTime:</i>{p.serviceTime}</div>\n            <div><i>Priority:</i>{p.priority}</div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default ProcessTable;\n","import React, { useState } from \"react\";\nimport InputColor from \"react-input-color\";\nimport \"./styles.css\";\n\nfunction ProcessDialog({ process, onSave, onCancel }) {\n  const [color, setColor] = useState({});\n  const [processId, setProcessId] = useState(process.id);\n  const [oProcessId, setOProcessId] = useState(process.id);\n  const [arrivalTime, setArrivalTime] = useState(process.arrivalTime);\n  const [serviceTime, setServiceTime] = useState(process.serviceTime);\n  const [priority, setPriority] = useState(process.priority);\n\n  const save = () => {\n    onSave({\n      oid: oProcessId,\n      id: processId,\n      color: color.hex,\n      arrivalTime: parseInt(arrivalTime),\n      serviceTime: parseInt(serviceTime),\n      priority: parseInt(priority)\n    });\n  };\n\n  return (\n    <div className=\"ProcessDialog\" onClick={onCancel}>\n      <div className=\"ProcessDialog-dialog\" onClick={e => e.stopPropagation()}>\n        <div className=\"ProcessDialog-input\">\n          <label>Color</label>\n          <span>\n            <InputColor\n              initialHexColor={process.color}\n              onChange={setColor}\n              placement=\"right\"\n            />\n          </span>\n        </div>\n        <div className=\"ProcessDialog-input\">\n          <label>Process</label>\n          <input\n            value={processId}\n            onChange={e => setProcessId(e.target.value)}\n          ></input>\n        </div>\n        <div className=\"ProcessDialog-input\">\n          <label>ArrivalTime</label>\n          <input\n            value={arrivalTime}\n            onChange={e => setArrivalTime(e.target.value)}\n          ></input>\n        </div>\n        <div className=\"ProcessDialog-input\">\n          <label>ServiceTime</label>\n          <input\n            value={serviceTime}\n            onChange={e => setServiceTime(e.target.value)}\n          ></input>\n        </div>\n        <div className=\"ProcessDialog-input\">\n          <label>Priority</label>\n          <input\n            value={priority}\n            onChange={e => setPriority(e.target.value)}\n          ></input>\n        </div>\n\n        <button className=\"ProcessDialog-saveBtn\" onClick={save}>Save</button>\n      </div>\n    </div>\n  );\n}\n\nexport default ProcessDialog;\n","import chroma from \"chroma-js\";\nconst baseTs = new Date(0).getTime();\n\nfunction uniq(value, index, self) {\n  return self.indexOf(value) === index;\n}\n\nconst convertFromTo = processes =>\n  processes.map(([id, from, to, ...res]) => [\n    id,\n    new Date(baseTs + from * 1000),\n    new Date(baseTs + to * 1000),\n    ...res\n  ]);\n\nconst getProcessesInTimespan = processes => (from, to) =>\n  processes.filter(\n    p =>\n      (p.arrivalTime > from && p.arrivalTime <= to) ||\n      (from === to && p.arrivalTime === from)\n  );\n\nconst findShortestServiceTime = processes => {\n  const shortest = [...processes].sort(\n    (a, b) => a.serviceTime - b.serviceTime\n  )[0];\n  return shortest;\n};\n\nexport default {\n  fcfs(processes) {\n    const stats = {\n      totalTurnaroundTime: 0,\n      totalResponseTime: 0,\n      averageTurnaroundTime: 0,\n      averageResponseTime: 0\n    };\n    const res = [];\n    const colors = [];\n    processes = processes.sort((a, b) => a.arrivalTime - b.arrivalTime);\n\n    processes.forEach(p => {\n      const lastProc = res.length ? res[res.length - 1] : null;\n      const lastTerminateTime = lastProc ? lastProc[2] : -1;\n      const from =\n        p.arrivalTime > lastTerminateTime ? p.arrivalTime : lastTerminateTime;\n      const to = from + p.serviceTime;\n      const responseTime = to - p.arrivalTime;\n\n      stats.totalTurnaroundTime += to - from;\n      stats.totalResponseTime += responseTime;\n      colors.push(p.color);\n      res.push([p.id, p.arrivalTime, p.arrivalTime]);\n      res.push([p.id, from, to]);\n    });\n\n    stats.averageTurnaroundTime = stats.totalTurnaroundTime / processes.length;\n    stats.averageResponseTime = stats.totalResponseTime / processes.length;\n    return {\n      scheduledProcesses: convertFromTo(res),\n      colors,\n      stats\n    };\n  },\n\n  spn(processes) {\n    const stats = {\n      totalTurnaroundTime: 0,\n      totalResponseTime: 0,\n      averageTurnaroundTime: 0,\n      averageResponseTime: 0\n    };\n    const res = [];\n    const colors = [];\n    processes = processes.sort((a, b) => a.arrivalTime - b.arrivalTime);\n\n    const processSelector = getProcessesInTimespan(processes);\n    let currentTimeMark = processes[0].arrivalTime;\n    let processBatch = processSelector(currentTimeMark, currentTimeMark);\n\n    // Add ArrivalTimes\n    processes.forEach(p => {\n      colors.push(p.color);\n      res.push([\n        p.id,\n        p.arrivalTime,\n        p.arrivalTime\n      ]);\n    });\n\n\n    // Add Processes\n    while (processBatch.length) {\n      let nextProcess;\n      if (processBatch.length === 1) {\n        nextProcess = processBatch.pop();\n      } else {\n        nextProcess = findShortestServiceTime(processBatch);\n        processBatch = processBatch.filter(p => p.id !== nextProcess.id);\n      }\n\n      // Add shortest process in batch\n      const from = currentTimeMark;\n      const to = from + nextProcess.serviceTime;\n      const responseTime = to - nextProcess.arrivalTime;\n      stats.totalTurnaroundTime += to - from;\n      stats.totalResponseTime += responseTime;\n      res.push([nextProcess.id, from, to]);\n\n      // Make new batch\n      currentTimeMark = to;\n      processBatch.push(...processSelector(from, to));\n    }\n\n    stats.averageTurnaroundTime = stats.totalTurnaroundTime / processes.length;\n    stats.averageResponseTime = stats.totalResponseTime / processes.length;\n\n    return {\n      scheduledProcesses: convertFromTo(res),\n      colors,\n      stats\n    };\n  },\n\n  srt(processes) {\n    const colors = [];\n    const res = [];\n    processes = processes.sort((a, b) => a.arrivalTime - b.arrivalTime);\n\n    // Add ArrivalTimes\n    processes.forEach(p => {\n      colors.push(p.color);\n      res.push([\n        p.id,\n        p.arrivalTime,\n        p.arrivalTime\n      ]);\n    });\n\n    let startTimes = {}\n    let terminateTimes = {}\n    const processSelector = getProcessesInTimespan(processes);\n    let importantTimes = processes\n      .map(p => p.arrivalTime)\n      .filter(uniq)\n      .reverse();\n    let currentTimeMark = importantTimes.pop();\n    let processBatch = [];\n    let currentProcess = null;\n    while (importantTimes.length || processBatch.length || currentProcess) {\n      if (importantTimes.length == 0) {\n        importantTimes.push(currentTimeMark + 1);\n      }\n      // Add new processes if there are any for currentTimeMark\n      processBatch.push(...processSelector(currentTimeMark, currentTimeMark));\n\n      // Find next process if there is a shorter one than the current\n      const timeLeftForProcess = currentProcess\n        ? currentProcess.serviceTime -\n          (currentTimeMark - currentProcess._startTime)\n        : null;\n      const potentialNextProcess = findShortestServiceTime(processBatch);\n      const potentialNextProcessIsShorterThanCurrent = currentProcess &&\n        potentialNextProcess &&\n        potentialNextProcess.serviceTime < timeLeftForProcess;\n\n      // No Running process start next process\n      if (!currentProcess && potentialNextProcess) {\n        processBatch = processBatch.filter(p => p.id !== potentialNextProcess.id);\n        currentProcess = potentialNextProcess;\n        currentProcess._startTime = currentTimeMark;\n        currentProcess._endTime = currentTimeMark + currentProcess.serviceTime;\n        importantTimes.push(currentProcess._endTime);\n        if(startTimes[currentProcess.id] === undefined) { startTimes[currentProcess.id] = currentProcess._startTime; }\n        importantTimes = importantTimes\n          .filter(uniq)\n          .sort()\n          .reverse();\n        currentTimeMark = importantTimes.pop();\n        continue;\n      }\n\n      // Process is terminated but no new process in line\n      if (\n        currentProcess &&\n        currentProcess._endTime <= currentTimeMark &&\n        !potentialNextProcess\n      ) {\n        res.push([\n          currentProcess.id,\n          currentProcess._startTime,\n          currentProcess._endTime\n        ]);\n        terminateTimes[currentProcess.id] = currentProcess._endTime;\n        currentProcess = null;\n        currentTimeMark = importantTimes.pop();\n        continue;\n      }\n\n      // Process is terminated with new process in line\n      if (\n        currentProcess &&\n        currentProcess._endTime <= currentTimeMark &&\n        potentialNextProcess\n      ) {\n        res.push([\n          currentProcess.id,\n          currentProcess._startTime,\n          currentProcess._endTime\n        ]);\n        terminateTimes[currentProcess.id] = currentProcess._endTime;\n        \n        processBatch = processBatch.filter(p => p.id !== potentialNextProcess.id);\n        currentProcess = potentialNextProcess;\n        currentProcess._startTime = currentTimeMark;\n        currentProcess._endTime = currentTimeMark + currentProcess.serviceTime;\n        if(startTimes[currentProcess.id] === undefined) { startTimes[currentProcess.id] = currentProcess._startTime; }\n        importantTimes.push(currentProcess._endTime);\n        importantTimes = importantTimes\n          .filter(uniq)\n          .sort()\n          .reverse();\n        currentTimeMark = importantTimes.pop();\n        continue;\n      }\n\n      // Stop current running process, to start a shorter one\n      if (potentialNextProcessIsShorterThanCurrent) {\n        processBatch = processBatch.filter(p => p.id !== potentialNextProcess.id);\n        res.push([\n          currentProcess.id,\n          currentProcess._startTime,\n          currentTimeMark\n        ]);\n\n        // Add rest of current process to process batch\n        const timeLeftForProcess =\n        currentProcess.serviceTime -\n        (currentTimeMark - currentProcess._startTime);\n        processBatch.push({\n          ...currentProcess,\n          _startTime: null,\n          _endTime: null,\n          serviceTime: timeLeftForProcess\n        });\n\n        // Set next process as current running process\n        currentProcess = potentialNextProcess;\n        currentProcess._startTime = currentTimeMark;\n        currentProcess._endTime = currentTimeMark + currentProcess.serviceTime;\n        if(startTimes[currentProcess.id] === undefined) { startTimes[currentProcess.id] = currentProcess._startTime; }\n        importantTimes.push(currentProcess._endTime);\n        importantTimes = importantTimes\n          .filter(uniq)\n          .sort()\n          .reverse();\n        currentTimeMark = importantTimes.pop();\n        continue;\n      }\n\n      // Do nothing go to next timemark\n      currentTimeMark = importantTimes.pop();\n    }\n\n    const stats = {\n      totalTurnaroundTime: 0,\n      totalResponseTime: 0,\n      averageTurnaroundTime: 0,\n      averageResponseTime: 0\n    };\n\n    processes.forEach(p => {\n      stats.totalTurnaroundTime += terminateTimes[p.id] - startTimes[p.id];\n      stats.totalResponseTime += terminateTimes[p.id] - p.arrivalTime;\n    });\n\n    stats.averageTurnaroundTime = stats.totalTurnaroundTime / processes.length;\n    stats.averageResponseTime = stats.totalResponseTime / processes.length;\n\n    return {\n      scheduledProcesses: convertFromTo(res),\n      colors,\n      stats\n    };\n  }\n};\n","import React from \"react\";\nimport Chart from \"react-google-charts\";\nimport scheduler from \"../../scheduler\";\nimport \"./styles.css\";\n\nfunction SchedulingSection({ processes, type, headline }) {\n  let selected_scheduler = scheduler[type];\n  const { scheduledProcesses, colors, stats } = selected_scheduler(processes);\n  return (\n    <div className=\"SchedulingSection box\">\n      <Chart\n        width={\"100%\"}\n        height={\"400px\"}\n        chartType=\"Timeline\"\n        loader={<div>Loading Chart ...</div>}\n        data={[\n          [\n            { type: \"string\", id: \"ProcessId\" },\n            { type: \"date\", id: \"Start\" },\n            { type: \"date\", id: \"End\" }\n          ],\n          ...(scheduledProcesses || [])\n        ]}\n        options={{\n          colors,\n          avoidOverlappingGridLines: true,\n        }}\n      />\n      <div className=\"SchedulingSection-stats\">\n      <h2>{headline}</h2>\n        <div>Average Turnaround-Time: <b>{stats.averageTurnaroundTime}</b></div>\n        <div>Average Response-Time: <b>{stats.averageResponseTime}</b></div>\n      </div>\n    </div>\n  );\n}\n\nexport default SchedulingSection;\n","import React, { useState } from 'react';\nimport ProcessTable from './components/process-table'\nimport ProcessDialog from './components/process-dialog'\nimport SchedulingSection from './components/scheduling-section'\nimport './App.css';\n\nconst defaultProcesses = [\n  { id: \"A\", arrivalTime: 0, serviceTime: 7, priority: 2, color: \"#4285f4\" },\n  { id: \"B\", arrivalTime: 3, serviceTime: 3, priority: 1, color: \"#db4437\" },\n  { id: \"C\", arrivalTime: 4, serviceTime: 2, priority: 3, color: \"#f4b400\" },\n  { id: \"D\", arrivalTime: 6, serviceTime: 5, priority: 2, color: \"#0f9d58\" },\n  { id: \"E\", arrivalTime: 8, serviceTime: 2, priority: 3, color: \"#ab47bc\" }\n];\n\nfunction App() {\n  const [processes, setProcesses] = useState(defaultProcesses);\n  const [selectedProcess, setSelectedProcess] = useState(null);\n\n  const updateProcess = (data) => {\n    const { oid, ...process } = data;\n    setProcesses((currentProcesses) => {\n      return currentProcesses.map(p => {\n        return p.id === oid ? process : p;\n      });\n    });\n    setSelectedProcess(null);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-section\">\n        <h2>Processes:</h2>\n        <ProcessTable processes={processes} onClick={setSelectedProcess} />\n      </div>\n\n      <div className=\"App-section\">\n        <h2>Simulations</h2>\n        <SchedulingSection headline=\"First Come First Served (FCFS)\" processes={processes} type=\"fcfs\" />\n        <SchedulingSection headline=\"Shortest Process Next (SPN)\" processes={processes} type=\"spn\" />\n        <SchedulingSection headline=\"Shortest Remaining Time Next (SRT)\" processes={processes} type=\"srt\" />\n      </div>\n\n      {selectedProcess && <ProcessDialog process={selectedProcess} onSave={updateProcess} onCancel={() => setSelectedProcess(null)} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}
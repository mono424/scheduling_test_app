{"version":3,"sources":["components/process-table/index.js","components/process-dialog/index.js","scheduler/spn.js","scheduler/srt.js","scheduler/rr.js","scheduler/hpwp.js","scheduler/hpnp.js","scheduler/index.js","scheduler/fcfs.js","components/scheduling-section/index.js","App.js","index.js"],"names":["ProcessTable","processes","onClick","className","map","p","key","id","style","backgroundColor","color","arrivalTime","serviceTime","priority","ProcessDialog","process","onSave","onCancel","useState","setColor","processId","setProcessId","oProcessId","setArrivalTime","setServiceTime","setPriority","e","stopPropagation","initialHexColor","onChange","placement","value","target","oid","hex","parseInt","statMaker","convertFromTo","getProcessesInTimespan","findShortestServiceTime","res","colors","sort","a","b","processSelector","currentTimeMark","processBatch","forEach","push","nextProcess","length","pop","filter","from","to","scheduledProcesses","stats","quick","uniq","startTimes","terminateTimes","importantTimes","reverse","currentProcess","timeLeftForProcess","_startTime","potentialNextProcess","potentialNextProcessIsShorterThanCurrent","_endTime","undefined","quantum","lastTimeMark","itemToReAdd","addTimeToMark","_timeLeft","currProcess","shift","_lastStart","lastArrivalTimw","baseTs","Date","getTime","utils","get","totalTurnaroundTime","totalResponseTime","averageTurnaroundTime","averageResponseTime","this","_processes","_calcTotalTurnaroundTime","_calcTotalResponseTime","processTimespanes","setProcesses","start","end","processTimespan","pid","processStarted","processTerminated","time","find","index","self","indexOf","fcfs","lastProc","lastTerminateTime","spn","srt","rr1","rr","rr4","hpwp","hpnp","SchedulingSection","type","headline","selected_scheduler","scheduler","width","height","chartType","loader","data","options","avoidOverlappingGridLines","defaultProcesses","App","selectedProcess","setSelectedProcess","href","currentProcesses","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0868ee2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nfunction ProcessTable({processes, onClick}) {\n  return (\n    <div className=\"ProcessTable\">\n      {processes.map(p => {\n        return (\n          <div onClick={() => onClick(p)} key={p.id} className=\"ProcessTable-Item box\">\n            <div className=\"color\" style={{ backgroundColor: p.color }}></div>\n            <div><i>Process:</i>{p.id}</div>\n            <div><i>ArrivalTime:</i>{p.arrivalTime}</div>\n            <div><i>ServiceTime:</i>{p.serviceTime}</div>\n            <div><i>Priority:</i>{p.priority}</div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default ProcessTable;\n","import React, { useState } from \"react\";\nimport InputColor from \"react-input-color\";\nimport \"./styles.css\";\n\nfunction ProcessDialog({ process, onSave, onCancel }) {\n  const [color, setColor] = useState({});\n  const [processId, setProcessId] = useState(process.id);\n  const [oProcessId] = useState(process.id);\n  const [arrivalTime, setArrivalTime] = useState(process.arrivalTime);\n  const [serviceTime, setServiceTime] = useState(process.serviceTime);\n  const [priority, setPriority] = useState(process.priority);\n\n  const save = () => {\n    onSave({\n      oid: oProcessId,\n      id: processId,\n      color: color.hex,\n      arrivalTime: parseInt(arrivalTime),\n      serviceTime: parseInt(serviceTime),\n      priority: parseInt(priority)\n    });\n  };\n\n  return (\n    <div className=\"ProcessDialog\" onClick={onCancel}>\n      <div className=\"ProcessDialog-dialog\" onClick={e => e.stopPropagation()}>\n        <div className=\"ProcessDialog-input\">\n          <label>Color</label>\n          <span>\n            <InputColor\n              initialHexColor={process.color}\n              onChange={setColor}\n              placement=\"right\"\n            />\n          </span>\n        </div>\n        <div className=\"ProcessDialog-input\">\n          <label>Process</label>\n          <input\n            value={processId}\n            onChange={e => setProcessId(e.target.value)}\n          ></input>\n        </div>\n        <div className=\"ProcessDialog-input\">\n          <label>ArrivalTime</label>\n          <input\n            value={arrivalTime}\n            onChange={e => setArrivalTime(e.target.value)}\n          ></input>\n        </div>\n        <div className=\"ProcessDialog-input\">\n          <label>ServiceTime</label>\n          <input\n            value={serviceTime}\n            onChange={e => setServiceTime(e.target.value)}\n          ></input>\n        </div>\n        <div className=\"ProcessDialog-input\">\n          <label>Priority</label>\n          <input\n            value={priority}\n            onChange={e => setPriority(e.target.value)}\n          ></input>\n        </div>\n\n        <button className=\"ProcessDialog-saveBtn\" onClick={save}>Save</button>\n      </div>\n    </div>\n  );\n}\n\nexport default ProcessDialog;\n","export default {\n  scheduler: ({\n    statMaker,\n    convertFromTo,\n    getProcessesInTimespan,\n    findShortestServiceTime\n  }) => processes => {\n    const res = [];\n    const colors = [];\n    processes = processes.sort((a, b) => a.arrivalTime - b.arrivalTime);\n\n    const processSelector = getProcessesInTimespan(processes);\n    let currentTimeMark = processes[0].arrivalTime;\n    let processBatch = processSelector(currentTimeMark, currentTimeMark);\n\n    // Add ArrivalTimes\n    processes.forEach(p => {\n      colors.push(p.color);\n      res.push([p.id, p.arrivalTime, p.arrivalTime]);\n    });\n\n    // Add Processes\n    while (processBatch.length) {\n      let nextProcess;\n      if (processBatch.length === 1) {\n        nextProcess = processBatch.pop();\n      } else {\n        nextProcess = findShortestServiceTime(processBatch);\n        processBatch = processBatch.filter(p => p.id !== nextProcess.id);\n      }\n\n      // Add shortest process in batch\n      const from = currentTimeMark;\n      const to = from + nextProcess.serviceTime;\n      const responseTime = to - nextProcess.arrivalTime;\n      res.push([nextProcess.id, from, to]);\n\n      // Make new batch\n      currentTimeMark = to;\n      processBatch.push(...processSelector(from, to));\n    }\n\n    return {\n      scheduledProcesses: convertFromTo(res),\n      colors,\n      stats: statMaker().quick(processes, res)\n    };\n  }\n};\n","export default {\n  scheduler: ({\n    statMaker,\n    convertFromTo,\n    uniq,\n    getProcessesInTimespan,\n    findShortestServiceTime\n  }) => processes => {\n    const colors = [];\n    const res = [];\n    processes = processes.sort((a, b) => a.arrivalTime - b.arrivalTime);\n\n    // Add ArrivalTimes\n    processes.forEach(p => {\n      colors.push(p.color);\n      res.push([p.id, p.arrivalTime, p.arrivalTime]);\n    });\n\n    let startTimes = {};\n    let terminateTimes = {};\n    const processSelector = getProcessesInTimespan(processes);\n    let importantTimes = processes\n      .map(p => p.arrivalTime)\n      .filter(uniq)\n      .reverse();\n    let currentTimeMark = importantTimes.pop();\n    let processBatch = [];\n    let currentProcess = null;\n    while (importantTimes.length || processBatch.length || currentProcess) {\n      if (importantTimes.length == 0) {\n        importantTimes.push(currentTimeMark + 1);\n      }\n      // Add new processes if there are any for currentTimeMark\n      processBatch.push(...processSelector(currentTimeMark, currentTimeMark));\n\n      // Find next process if there is a shorter one than the current\n      const timeLeftForProcess = currentProcess\n        ? currentProcess.serviceTime -\n          (currentTimeMark - currentProcess._startTime)\n        : null;\n      const potentialNextProcess = findShortestServiceTime(processBatch);\n      const potentialNextProcessIsShorterThanCurrent =\n        currentProcess &&\n        potentialNextProcess &&\n        potentialNextProcess.serviceTime < timeLeftForProcess;\n\n      // No Running process start next process\n      if (!currentProcess && potentialNextProcess) {\n        processBatch = processBatch.filter(\n          p => p.id !== potentialNextProcess.id\n        );\n        currentProcess = potentialNextProcess;\n        currentProcess._startTime = currentTimeMark;\n        currentProcess._endTime = currentTimeMark + currentProcess.serviceTime;\n        importantTimes.push(currentProcess._endTime);\n        if (startTimes[currentProcess.id] === undefined) {\n          startTimes[currentProcess.id] = currentProcess._startTime;\n        }\n        importantTimes = importantTimes\n          .filter(uniq)\n          .sort()\n          .reverse();\n        currentTimeMark = importantTimes.pop();\n        continue;\n      }\n\n      // Process is terminated but no new process in line\n      if (\n        currentProcess &&\n        currentProcess._endTime <= currentTimeMark &&\n        !potentialNextProcess\n      ) {\n        res.push([\n          currentProcess.id,\n          currentProcess._startTime,\n          currentProcess._endTime\n        ]);\n        terminateTimes[currentProcess.id] = currentProcess._endTime;\n        currentProcess = null;\n        currentTimeMark = importantTimes.pop();\n        continue;\n      }\n\n      // Process is terminated with new process in line\n      if (\n        currentProcess &&\n        currentProcess._endTime <= currentTimeMark &&\n        potentialNextProcess\n      ) {\n        res.push([\n          currentProcess.id,\n          currentProcess._startTime,\n          currentProcess._endTime\n        ]);\n        terminateTimes[currentProcess.id] = currentProcess._endTime;\n\n        processBatch = processBatch.filter(\n          p => p.id !== potentialNextProcess.id\n        );\n        currentProcess = potentialNextProcess;\n        currentProcess._startTime = currentTimeMark;\n        currentProcess._endTime = currentTimeMark + currentProcess.serviceTime;\n        if (startTimes[currentProcess.id] === undefined) {\n          startTimes[currentProcess.id] = currentProcess._startTime;\n        }\n        importantTimes.push(currentProcess._endTime);\n        importantTimes = importantTimes\n          .filter(uniq)\n          .sort()\n          .reverse();\n        currentTimeMark = importantTimes.pop();\n        continue;\n      }\n\n      // Stop current running process, to start a shorter one\n      if (potentialNextProcessIsShorterThanCurrent) {\n        processBatch = processBatch.filter(\n          p => p.id !== potentialNextProcess.id\n        );\n        res.push([\n          currentProcess.id,\n          currentProcess._startTime,\n          currentTimeMark\n        ]);\n\n        // Add rest of current process to process batch\n        const timeLeftForProcess =\n          currentProcess.serviceTime -\n          (currentTimeMark - currentProcess._startTime);\n        processBatch.push({\n          ...currentProcess,\n          _startTime: null,\n          _endTime: null,\n          serviceTime: timeLeftForProcess\n        });\n\n        // Set next process as current running process\n        currentProcess = potentialNextProcess;\n        currentProcess._startTime = currentTimeMark;\n        currentProcess._endTime = currentTimeMark + currentProcess.serviceTime;\n        if (startTimes[currentProcess.id] === undefined) {\n          startTimes[currentProcess.id] = currentProcess._startTime;\n        }\n        importantTimes.push(currentProcess._endTime);\n        importantTimes = importantTimes\n          .filter(uniq)\n          .sort()\n          .reverse();\n        currentTimeMark = importantTimes.pop();\n        continue;\n      }\n\n      // Do nothing go to next timemark\n      currentTimeMark = importantTimes.pop();\n    }\n\n    return {\n      scheduledProcesses: convertFromTo(res),\n      colors,\n      stats: statMaker().quick(processes, res)\n    };\n  }\n};\n","export default {\n  scheduler: ({\n    statMaker,\n    convertFromTo,\n    getProcessesInTimespan\n  }) => quantum => processes => {\n    processes = processes.sort((a, b) => a.arrivalTime - b.arrivalTime);\n\n    const res = [];\n    processes.forEach(p => {\n        res.push([p.id, p.arrivalTime, p.arrivalTime]);\n    });\n\n    const processSelector = getProcessesInTimespan(processes);\n    let currentTimeMark = processes[0].arrivalTime;\n    let processBatch = [];\n\n    let lastTimeMark = currentTimeMark;\n    let itemToReAdd = null;\n    do {\n      let addTimeToMark = 1;\n    \n      processBatch.push(...processSelector(\n        lastTimeMark,\n        currentTimeMark\n      ).map(p => ({ _timeLeft: p.serviceTime, ...p })));\n      if (itemToReAdd) { processBatch.push(itemToReAdd); itemToReAdd = null }\n\n      if (processBatch.length > 0) {\n        const currProcess = processBatch.shift();\n        if (quantum > currProcess._timeLeft) {\n          addTimeToMark = currProcess._timeLeft;\n        } else {\n          addTimeToMark = quantum;\n        }\n        res.push([\n          currProcess.id,\n          currentTimeMark,\n          currentTimeMark + addTimeToMark\n        ]);\n\n        currProcess._timeLeft -= addTimeToMark;\n        if (currProcess._timeLeft > 0) {\n            itemToReAdd = currProcess;\n        }\n      }\n\n      lastTimeMark = currentTimeMark;\n      currentTimeMark += addTimeToMark;\n    } while (processBatch.length > 0 || itemToReAdd);\n\n    return {\n      scheduledProcesses: convertFromTo(res),\n      colors: processes.map(p => p.color),\n      stats: statMaker().quick(processes, res)\n    };\n  }\n};\n","export default {\n  scheduler: ({\n    statMaker,\n    convertFromTo,\n    getProcessesInTimespan\n  }) => processes => {\n    processes = processes.sort((a, b) => a.arrivalTime - b.arrivalTime);\n\n    const res = [];\n    processes.forEach(p => {\n        res.push([p.id, p.arrivalTime, p.arrivalTime]);\n    });\n\n    const processSelector = getProcessesInTimespan(processes);\n    let currentTimeMark = processes[0].arrivalTime;\n    let processBatch = [];\n\n    let lastTimeMark = currentTimeMark;\n    let lastItem = null;\n    let itemToReAdd = null;\n    do {\n      let addTimeToMark = 1;\n    \n      processBatch.push(...processSelector(\n        lastTimeMark,\n        currentTimeMark\n      ).map(p => ({ _timeLeft: p.serviceTime, ...p, _lastStart: -1 })));\n      if (itemToReAdd) { processBatch.push(itemToReAdd); lastItem = itemToReAdd; itemToReAdd = null }\n      processBatch.sort((a, b) => ((b.priority - a.priority) || (b._lastStart - a._lastStart)))\n\n      if (processBatch.length > 0) {\n        const currProcess = processBatch.shift();\n\n        res.push([\n          currProcess.id,\n          currentTimeMark,\n          currentTimeMark + addTimeToMark\n        ]);\n\n        currProcess._lastStart = currentTimeMark;\n        currProcess._timeLeft -= addTimeToMark;\n        if (currProcess._timeLeft > 0) {\n            itemToReAdd = currProcess;\n        }\n      }\n\n      lastTimeMark = currentTimeMark;\n      currentTimeMark += addTimeToMark;\n    } while (processBatch.length > 0 || itemToReAdd);\n\n    return {\n      scheduledProcesses: convertFromTo(res),\n      colors: processes.map(p => p.color),\n      stats: statMaker().quick(processes, res)\n    };\n  }\n};\n","export default {\n  scheduler: ({\n    statMaker,\n    convertFromTo,\n    getProcessesInTimespan\n  }) => processes => {\n    processes = processes.sort((a, b) => a.arrivalTime - b.arrivalTime);\n\n    const res = [];\n    processes.forEach(p => {\n        res.push([p.id, p.arrivalTime, p.arrivalTime]);\n    });\n\n    const processSelector = getProcessesInTimespan(processes);\n    let currentTimeMark = processes[0].arrivalTime;\n    let lastArrivalTimw = processes[processes.length - 1].arrivalTime;\n    let processBatch = [];\n\n    let lastTimeMark = currentTimeMark;\n    do {\n      let addTimeToMark = 1;\n    \n      processBatch.push(...processSelector(\n        lastTimeMark,\n        currentTimeMark\n      ).map(p => ({ _timeLeft: p.serviceTime, ...p, _lastStart: -1 })));\n      processBatch.sort((a, b) => ((b.priority - a.priority) || (b._lastStart - a._lastStart)))\n\n      if (processBatch.length > 0) {\n        const currProcess = processBatch.shift();\n        addTimeToMark = currProcess.serviceTime;\n\n        res.push([\n          currProcess.id,\n          currentTimeMark,\n          currentTimeMark + addTimeToMark\n        ]);\n      }\n\n      lastTimeMark = currentTimeMark;\n      currentTimeMark += addTimeToMark;\n    } while (processBatch.length > 0 || currentTimeMark <= lastArrivalTimw);\n\n    return {\n      scheduledProcesses: convertFromTo(res),\n      colors: processes.map(p => p.color),\n      stats: statMaker().quick(processes, res)\n    };\n  }\n};\n","import fcfs from \"./fcfs\";\nimport spn from \"./spn\";\nimport srt from \"./srt\";\nimport rr from \"./rr\";\nimport hpwp from \"./hpwp\";\nimport hpnp from \"./hpnp\";\nconst baseTs = new Date(0).getTime();\n\nfunction statMaker() {\n  return {\n    get() {\n      const stats = {\n        totalTurnaroundTime: 0,\n        totalResponseTime: 0,\n        averageTurnaroundTime: 0,\n        averageResponseTime: 0\n      };\n\n      this._processes.forEach(p => {\n        stats.totalTurnaroundTime += this._calcTotalTurnaroundTime(p);\n        stats.totalResponseTime += this._calcTotalResponseTime(p);\n      });\n  \n      stats.averageTurnaroundTime = stats.totalTurnaroundTime / this._processes.length;\n      stats.averageResponseTime = stats.totalResponseTime / this._processes.length;\n      return stats;\n    },\n    quick(processes, processTimespanes) {\n      this.setProcesses(processes);\n      processTimespanes.forEach(([id, start, end]) => this.processTimespan(id, start, end));\n      return this.get();\n    },\n    processTimespan(pid, start, end) {\n      if (start >= end) { return; }\n      this.processStarted(pid, start);\n      this.processTerminated(pid, end);\n    },\n    processStarted(pid, time) {\n      this._processes.find(p => p.id === pid).startTimes.push(time);\n    },\n    processTerminated(pid, time) {\n      this._processes.find(p => p.id === pid).terminateTimes.push(time);\n    },\n    setProcesses(processes) {\n      this._processes = processes.map(p => ({\n        id: p.id,\n        startTimes: [],\n        terminateTimes: [],\n        arrivalTime: p.arrivalTime\n      }));\n    },\n    _calcTotalResponseTime(process) {\n      return [...process.terminateTimes].pop() - process.arrivalTime;\n    },\n    _calcTotalTurnaroundTime(process) {\n      return [...process.terminateTimes].pop() - process.startTimes[0];\n    },\n    _processes: [],\n  };\n}\n\nfunction uniq(value, index, self) {\n  return self.indexOf(value) === index;\n}\n\nconst convertFromTo = processes =>\n  processes.map(([id, from, to, ...res]) => [\n    id,\n    new Date(baseTs + from * 1000),\n    new Date(baseTs + to * 1000),\n    ...res\n  ]);\n\nconst getProcessesInTimespan = processes => (from, to) =>\n  processes.filter(\n    p =>\n      (p.arrivalTime > from && p.arrivalTime <= to) ||\n      (from === to && p.arrivalTime === from)\n  );\n\nconst findShortestServiceTime = processes => {\n  const shortest = [...processes].sort(\n    (a, b) => a.serviceTime - b.serviceTime\n  )[0];\n  return shortest;\n};\n\nconst utils = {\n  statMaker,\n  convertFromTo,\n  uniq,\n  getProcessesInTimespan,\n  findShortestServiceTime\n};\n\nexport default {\n  fcfs: fcfs.scheduler(utils),\n  spn: spn.scheduler(utils),\n  srt: srt.scheduler(utils),\n  rr1: rr.scheduler(utils)(1),\n  rr4: rr.scheduler(utils)(4),\n  hpwp: hpwp.scheduler(utils),\n  hpnp: hpnp.scheduler(utils),\n};\n","export default {\n  scheduler: ({ statMaker, convertFromTo }) => processes => {\n    const res = [];\n    const colors = [];\n    processes = processes.sort((a, b) => a.arrivalTime - b.arrivalTime);\n  \n    processes.forEach(p => {\n      const lastProc = res.length ? res[res.length - 1] : null;\n      const lastTerminateTime = lastProc ? lastProc[2] : -1;\n      const from =\n        p.arrivalTime > lastTerminateTime ? p.arrivalTime : lastTerminateTime;\n      const to = from + p.serviceTime;\n\n      colors.push(p.color);\n      res.push([p.id, p.arrivalTime, p.arrivalTime]);\n      res.push([p.id, from, to]);\n    });\n  \n    return {\n      scheduledProcesses: convertFromTo(res),\n      colors,\n      stats: statMaker().quick(processes, res)\n    };\n  }\n};\n","import React from \"react\";\nimport Chart from \"react-google-charts\";\nimport scheduler from \"../../scheduler\";\nimport \"./styles.css\";\n\nfunction SchedulingSection({ processes, type, headline }) {\n  let selected_scheduler = scheduler[type];\n  const { scheduledProcesses, colors, stats } = selected_scheduler(processes);\n  return (\n    <div className=\"SchedulingSection box\">\n      <Chart\n        width={\"100%\"}\n        height={\"400px\"}\n        chartType=\"Timeline\"\n        loader={<div>Loading Chart ...</div>}\n        data={[\n          [\n            { type: \"string\", id: \"ProcessId\" },\n            { type: \"date\", id: \"Start\" },\n            { type: \"date\", id: \"End\" }\n          ],\n          ...(scheduledProcesses || [])\n        ]}\n        options={{\n          colors,\n          avoidOverlappingGridLines: false,\n        }}\n      />\n      <div className=\"SchedulingSection-stats\">\n      <h2>{headline}</h2>\n        <div>Average Turnaround-Time: <b>{stats.averageTurnaroundTime}</b></div>\n        <div>Average Response-Time: <b>{stats.averageResponseTime}</b></div>\n      </div>\n    </div>\n  );\n}\n\nexport default SchedulingSection;\n","import React, { useState } from 'react';\nimport ProcessTable from './components/process-table'\nimport ProcessDialog from './components/process-dialog'\nimport SchedulingSection from './components/scheduling-section'\nimport './App.css';\n\nconst defaultProcesses = [\n  { id: \"A\", arrivalTime: 0, serviceTime: 7, priority: 2, color: \"#4285f4\" },\n  { id: \"B\", arrivalTime: 3, serviceTime: 3, priority: 1, color: \"#db4437\" },\n  { id: \"C\", arrivalTime: 4, serviceTime: 2, priority: 3, color: \"#f4b400\" },\n  { id: \"D\", arrivalTime: 6, serviceTime: 5, priority: 2, color: \"#0f9d58\" },\n  { id: \"E\", arrivalTime: 8, serviceTime: 2, priority: 3, color: \"#ab47bc\" }\n];\n\nfunction App() {\n  const [processes, setProcesses] = useState(defaultProcesses);\n  const [selectedProcess, setSelectedProcess] = useState(null);\n\n  const updateProcess = (data) => {\n    const { oid, ...process } = data;\n    setProcesses((currentProcesses) => {\n      return currentProcesses.map(p => {\n        return p.id === oid ? process : p;\n      });\n    });\n    setSelectedProcess(null);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-section\">\n        <h2>Processes:</h2>\n        <ProcessTable processes={processes} onClick={setSelectedProcess} />\n      </div>\n\n      <div className=\"print-break\"></div>\n\n      <div className=\"App-section\">\n        <h2>Simulations</h2>\n        <SchedulingSection headline=\"First Come First Served (FCFS)\" processes={processes} type=\"fcfs\" />\n        <SchedulingSection headline=\"Shortest Process Next (SPN)\" processes={processes} type=\"spn\" />\n        <div className=\"print-break\"></div>\n        <SchedulingSection headline=\"Shortest Remaining Time Next (SRT)\" processes={processes} type=\"srt\" />\n        <SchedulingSection headline=\"Round Robin (Quantum = 1)\" processes={processes} type=\"rr1\" />\n        <div className=\"print-break\"></div>\n        <SchedulingSection headline=\"Round Robin (Quantum = 4)\" processes={processes} type=\"rr4\" />\n        <SchedulingSection headline=\"Highest Priority First (with preemption)\" processes={processes} type=\"hpwp\" />\n        <div className=\"print-break\"></div>\n        <SchedulingSection headline=\"Highest Priority First (without preemption)\" processes={processes} type=\"hpnp\" />\n      </div>\n\n      <div className=\"footer\">\n        <a target=\"_blank\" href=\"https://khadimfall.com\">Khadim Fall</a>\n        <a target=\"_blank\" href=\"https://github.com/mono424/scheduling_test_app\">GitHub</a>\n      </div>\n\n      <div className=\"footer-print\">\n        OpenSource on Github: https://github.com/mono424/scheduling_test_app<br />\n        See live on: https://mono424.github.io/scheduling_test_app/<br />\n        by Khadim Fall [https://khadimfall.com]<br />\n      </div>\n\n      {selectedProcess && <ProcessDialog process={selectedProcess} onSave={updateProcess} onCancel={() => setSelectedProcess(null)} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}